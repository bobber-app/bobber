name: CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

jobs:
  app:
    name: Frontend (App)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          # Use the workspace root lockfile
          cache-dependency-path: 'pnpm-lock.yaml'

      # Install from repo root so pnpm creates app/node_modules
      - name: Install dependencies (app)
        working-directory: .
        run: pnpm install --filter ./app... --frozen-lockfile

      - name: Run type checks
        run: pnpm run typecheck

      - name: Check formatting
        run: pnpm run format:check

      - name: Run lint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build project
        run: pnpm run build

  backend:
    name: Backend (NestJS)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          # Use the workspace root lockfile
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3

      # Install from repo root so pnpm creates backend/node_modules
      - name: Install dependencies (backend, ignore scripts)
        working-directory: .
        run: pnpm install --filter ./backend... --frozen-lockfile --ignore-scripts

      - name: Run essential postinstall scripts
        run: |
          # Run SWC postinstall (needed for performance)
          if [ -f "node_modules/@swc/core/postinstall.js" ]; then
            cd node_modules/@swc/core && node postinstall.js
            cd ../..
          fi
        continue-on-error: true

      - name: Create config files from examples
        run: |
          cd ./src
          cp secrets.config.example.ts secrets.config.ts
          cp mikro-orm.config.example.ts mikro-orm.config.ts

      - name: Run type checks
        run: pnpm run typecheck

      - name: Check formatting
        run: pnpm run format:check

      - name: Run lint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build project
        run: pnpm run build