name: CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

jobs:
  app:
    name: Frontend (App)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: './app/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checks
        run: pnpm run typecheck

      - name: Check formatting
        run: pnpm run format:check

      - name: Run lint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build project
        run: pnpm run build

  backend:
    name: Backend (NestJS)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: './backend/pnpm-lock.yaml'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-dev

      - name: Set npm config for native builds
        run: |
          npm config set python python3
          npm config set target_arch x64
          npm config set target_platform linux
          npm config set cache /tmp/.npm
          npm config set progress false

      - name: Install dependencies (with fallback)
        run: |
          # First try with ignore-scripts to avoid problematic postinstall scripts
          pnpm install --frozen-lockfile --ignore-scripts || {
            echo "Installation with --ignore-scripts failed, trying without frozen lockfile..."
            pnpm install --ignore-scripts || {
              echo "Both attempts failed, trying basic install with error handling..."
              pnpm install --frozen-lockfile --ignore-scripts=false || exit 1
            }
          }

      - name: Run essential postinstall scripts
        run: |
          # Only run critical postinstall scripts that are needed for building
          echo "Running essential postinstall scripts..."
          
          # SWC Core (needed for compilation)
          if [ -f "node_modules/@swc/core/postinstall.js" ]; then
            echo "Running SWC postinstall..."
            cd node_modules/@swc/core && node postinstall.js && cd ../..
          fi
          
          # NestJS Core (if needed)
          if [ -f "node_modules/@nestjs/core/postinstall.js" ]; then
            echo "Running NestJS Core postinstall..."
            cd node_modules/@nestjs/core && (node postinstall.js || true) && cd ../..
          fi
          
          echo "Essential postinstall scripts completed"
        continue-on-error: true

      - name: Verify critical dependencies
        run: |
          echo "Verifying critical dependencies are available..."
          node -e "try { require('@swc/core'); console.log('✓ @swc/core available'); } catch(e) { console.log('✗ @swc/core missing:', e.message); }"
          node -e "try { require('@nestjs/core'); console.log('✓ @nestjs/core available'); } catch(e) { console.log('✗ @nestjs/core missing:', e.message); }"
          node -e "try { require('typescript'); console.log('✓ typescript available'); } catch(e) { console.log('✗ typescript missing:', e.message); }"

      - name: Run type checks
        run: pnpm run typecheck

      - name: Check formatting
        run: pnpm run format:check

      - name: Run lint
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

      - name: Build project
        run: pnpm run build